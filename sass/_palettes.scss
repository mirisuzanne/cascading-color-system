/// # Palettes
/// Once the initial hue, saturation, lightness, contrast,
/// and theme are in place --
/// we can generate dynamic palettes based on those values.
///
/// While themes can be set universally,
/// palettes need to be recalculated based on mode.
/// By default, we apply both to the `[data-ccs-colors]` attribute.
///
/// @group palettes

/// The number of tints and shades to create
/// on either side of the base colors.
///
/// @type integer
/// @group palettes
$steps: 4 !default;

/// Optionally generate desaturated seconday `*-fade` palettes
/// for each base palette.
/// Number values will be used as
/// the `hsla()` *alpha* value,
/// adding transparency to the faded palette.
///
/// @type boolean | number
/// @group palettes
$fades: false !default;

/// Generate a striped gradient for each color palette --
/// prime, accent, and `*-fade` if required.
/// These are useful for showing the colors generated.
///
/// @type boolean
/// @group palettes
$gradients: false !default;

/// Optionally generate CSS for the colors on-load,
/// rarther than using the provided mixins directly.
///
/// @type boolean
/// @group palettes
$build: true !default;

// Colors
// ------
/// Generate custom-property color palettes
/// with a given number of tint/shade variations --
/// dynamically based on the inherited hue, saturation, lightness,
/// mode (light/dark), and accent theme.
///
/// @param {integer} $steps [$steps or 4] -
///   The number (each) of tints and shades to generate
/// @param {boolean | number} $fades [$fades] -
///   Optionally generate desaturated seconday `*-fade` palettes
///   for each base palette.
///   Number values will be used as
///   the `hsla()` *alpha* value,
///   adding transparency to the faded palette.
/// @param {boolean} $gradients [$gradients] -
///   Generate a striped gradient for each color palette --
///   prime, accent, and `*-fade` if required.
///   These are useful for showing the colors generated.
/// @output -
///   CSS custom properties to generate each color
///   in the requested palettes,
///   based on the starting hue, saturation, lightness,
///   and accent theme.
/// @group palettes
@mixin colors(
  $steps: $steps or 4,
  $fades: $fades,
  $gradients: $gradients,
) {
  $colors: ('prime', 'accent', 'neutral');

  // offset steps
  --ccs-step: calc(var(--ccs-contrast) / #{$steps});

  // main colors
  @if ($fades) {
    $sla: var(--ccs-s--bg-contrast), var(--ccs-l), var(--ccs-fade);
    --ccs-fade: #{if(type-of($fades) == 'number', $fades, 1)};
    --ccs-fade-background: var(--ccs-fade-background--theme, var(--ccs-fade-background--config, 0%));

    @each $color in $colors {
      --ccs-#{$color}--fade: hsla(var(--ccs-h--#{$color}), #{$sla});
      --ccs-#{$color}--fg-full-fade: var(--ccs-#{$color}--fg#{$steps}-fade);
      --ccs-#{$color}--bg-full-fade: var(--ccs-#{$color}--bg#{$steps}-fade);
    }
  }


  @for $i from 1 through $steps {
    $bg: 'bg#{$i}';
    $fg: 'fg#{$i}';

    // lightness steps
    --ccs-l--#{$bg}: calc(var(--ccs-l) + var(--ccs-step) * #{$i} * var(--ccs-mode));
    --ccs-l--#{$fg}: calc(var(--ccs-l) - var(--ccs-step) * #{$i} * var(--ccs-mode));

    // saturation steps
    --ccs-s--#{$fg}: calc(var(--ccs-s) - var(--ccs-step) * #{$i});
    --ccs-s--#{$bg}: calc(var(--ccs-s) - var(--ccs-fade-background) - var(--ccs-step) * #{$i});

    // sl steps
    $sl-fg: var(--ccs-s--#{$fg}), var(--ccs-l--#{$fg});
    $sl-bg: var(--ccs-s--#{$bg}), var(--ccs-l--#{$bg});
    $sl-fg--neutral: var(--ccs-s--bg-contrast), var(--ccs-l--#{$fg});
    $sl-bg--neutral: var(--ccs-s--bg-contrast), var(--ccs-l--#{$bg});

    // color steps
    @each $color in $colors {
      $slf: if($color == 'neutral', $sl-fg--neutral, $sl-fg);
      $slb: if($color == 'neutral', $sl-bg--neutral, $sl-bg);

      --ccs-#{$color}--#{$fg}: hsl(var(--ccs-h--#{$color}), #{$slf});
      --ccs-#{$color}--#{$bg}: hsl(var(--ccs-h--#{$color}), #{$slb});
    }

    @if ($fades) {
      $sla-fg: var(--ccs-s--bg-contrast), var(--ccs-l--#{$fg}), var(--ccs-fade);
      $sla-bg: var(--ccs-s--bg-contrast), var(--ccs-l--#{$bg}), var(--ccs-fade);

      @each $color in $colors {
        --ccs-#{$color}--#{$fg}-fade: hsla(var(--ccs-h--#{$color}), #{$sla-fg});
        --ccs-#{$color}--#{$bg}-fade: hsla(var(--ccs-h--#{$color}), #{$sla-bg});
      }
    }
  }

  @if ($gradients) {
    @include gradient($steps, $fades);
  }
}

// Gradient
// --------
/// Generate striped CSS gradients for each palette.
/// These are useful for visualizing the available generated colors.
///
/// @param {integer} $steps [$steps or 4] -
///   The number (each) of tints and shades to generate
/// @param {boolean | number} $fades [$fades] -
///   Optionally generate desaturated seconday `*-fade` palettes
///   for each base palette.
///   Number values will be used as
///   the `hsla()` *alpha* value,
///   adding transparency to the faded palette.
/// @group palettes
@mixin gradient(
  $steps: $steps or 4,
  $fades: $fades,
) {
  $colors: ('prime', 'accent', 'neutral');
  $gradients: ();

  @for $i from (0 - $steps) through $steps {
    $n: $i + $steps;
    $pos: abs($i);
    $stops: calc(var(--stop) * #{$n}) calc(var(--stop) * #{$n + 1});
    $var: if($i == $pos, '--fg', '--bg');
    $var: if($i == 0, '', '#{$var}#{$pos}');
    $fade: if($var != '', '#{$var}-fade', '--fade');

    @each $color in $colors {
      $main: map-get($gradients, '#{$color}-main') or ();
      $faded: map-get($gradients, '#{$color}-fade') or ();

      $main: append($main, var(--ccs-#{$color}#{$var}) $stops, comma);
      $faded: append($faded, var(--ccs-#{$color}#{$fade}) $stops, comma);

      $map: (
        '#{$color}-main': $main,
        '#{$color}-fade': $faded,
      );

      $gradients: map-merge($gradients, $map);
    }
  }

  --stop: calc(100% / (#{$steps} * 2 + 1));

  @each $color in $colors {
    $main: map-get($gradients, '#{$color}-main');
    --#{$color}-gradient: linear-gradient(to right, #{$main});

    @if ($fades) {
      $faded: map-get($gradients, '#{$color}-fade');
      --#{$color}-gradient--fade: linear-gradient(to right, #{$faded});
    }
  }
}

@if ($build) {
  [data-ccs-colors] {
    @include colors;
  }
}
